import 'package:flutter/material.dart';
import '../HOME/home_page.dart';

void main() {
  runApp(MaterialApp(home: ExerciseQuestionScreen()));
}

const primaryColor = Color(0xFF25AAAC);
const selectedBorderColor = Color(0xFF00C8B7); // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡πâ‡∏ô‡∏ï‡πå
const defaultBorderColor = Color(0xFFD3D3D3); // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ

class QuestionScreenTemplate extends StatefulWidget {
  final String questionText;
  final List<String> choices;
  final VoidCallback onNext;
  final int questionNumber;
  final int totalQuestions;
  final IconData icon;

  const QuestionScreenTemplate({
    required this.questionText,
    required this.choices,
    required this.onNext,
    required this.questionNumber,
    required this.totalQuestions,
    required this.icon,
    super.key,
  });

  @override
  State<QuestionScreenTemplate> createState() => _QuestionScreenTemplateState();
}

class _QuestionScreenTemplateState extends State<QuestionScreenTemplate> {
  String? selectedAnswer;

  void _submit() {
    if (selectedAnswer == null) {
      _showErrorDialog();
    } else {
      widget.onNext();
    }
  }

  void _showErrorDialog() {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö'),
        content: const Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠'),
        actions: [
          TextButton(
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠

    return Scaffold(
      appBar: AppBar(
        title: const Text('‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'),
        backgroundColor: primaryColor,
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            LinearProgressIndicator(
              value: widget.questionNumber / widget.totalQuestions,
              color: primaryColor,
              backgroundColor: primaryColor.withOpacity(0.2),
            ),
            const SizedBox(height: 20),
            Row(
              children: [
                Icon(widget.icon, color: primaryColor, size: 32),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    widget.questionText,
                    style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            ...widget.choices.map(
                  (choice) => GestureDetector(
                onTap: () => setState(() {
                  selectedAnswer = choice;
                }),
                child: Container(
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  width: screenWidth - 32, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏•‡∏ö padding ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤‡πÅ‡∏•‡∏∞‡∏ã‡πâ‡∏≤‡∏¢)
                  padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(15),
                    border: Border.all(
                      color: selectedAnswer == choice
                          ? selectedBorderColor
                          : defaultBorderColor, // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤
                      width: 2,
                    ),
                    color: selectedAnswer == choice
                        ? selectedBorderColor.withOpacity(0.2) // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡πâ‡∏ô‡∏ï‡πå
                        : Colors.white, // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                  ),
                  child: Text(
                    choice,
                    style: const TextStyle(fontSize: 18),
                  ),
                ),
              ),
            ),
            const Spacer(),
            ElevatedButton(
              onPressed: _submit,
              style: ElevatedButton.styleFrom(
                minimumSize: const Size(double.infinity, 50),
                backgroundColor: primaryColor,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: const Text('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', style: TextStyle(fontSize: 18)),
            ),
          ],
        ),
      ),
    );
  }
}

class ExerciseQuestionScreen extends StatelessWidget {
  const ExerciseQuestionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô? üèÉ‚Äç‚ôÇÔ∏è',
      choices: ['‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô', '3-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', '1-2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡∏¢'],
      onNext: () => Navigator.push(context, MaterialPageRoute(builder: (_) => SleepQuestionScreen())),
      questionNumber: 1,
      totalQuestions: 7,
      icon: Icons.fitness_center,
    );
  }
}

class SleepQuestionScreen extends StatelessWidget {
  const SleepQuestionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Å‡∏µ‡πà‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á? üò¥',
      choices: ['‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '6-8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '4-6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'],
      onNext: () => Navigator.push(context, MaterialPageRoute(builder: (_) => WorkShiftQuestionScreen())),
      questionNumber: 2,
      totalQuestions: 7,
      icon: Icons.bedtime,
    );
  }
}

class WorkShiftQuestionScreen extends StatelessWidget {
  const WorkShiftQuestionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÉ‡∏î? üïí',
      choices: [
        '‡∏Å‡∏∞‡πÄ‡∏ä‡πâ‡∏≤ (06:00 ‚Äì 14:00 ‡∏ô.)',
        '‡∏Å‡∏∞‡∏ö‡πà‡∏≤‡∏¢ (14:00 ‚Äì 22:00 ‡∏ô.)',
        '‡∏Å‡∏∞‡∏î‡∏∂‡∏Å (22:00 ‚Äì 06:00 ‡∏ô.)',
        '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏°‡∏≠',
        '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ',
      ],
      onNext: () => Navigator.push(context, MaterialPageRoute(builder: (_) => MealFrequencyQuestionScreen())),
      questionNumber: 3,
      totalQuestions: 7,
      icon: Icons.work_history,
    );
  }
}

class MealFrequencyQuestionScreen extends StatelessWidget {
  const MealFrequencyQuestionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô ‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Å‡∏µ‡πà‡∏°‡∏∑‡πâ‡∏≠? üçΩÔ∏è',
      choices: ['1 ‡∏°‡∏∑‡πâ‡∏≠', '2 ‡∏°‡∏∑‡πâ‡∏≠', '3 ‡∏°‡∏∑‡πâ‡∏≠', '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏°‡∏∑‡πâ‡∏≠', '‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏•‡∏¢'],
      onNext: () => Navigator.push(context, MaterialPageRoute(builder: (_) => FoodAllergyQuestionScreen())),
      questionNumber: 4,
      totalQuestions: 7,
      icon: Icons.restaurant,
    );
  }
}

class FoodAllergyQuestionScreen extends StatelessWidget {
  const FoodAllergyQuestionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ü§ß',
      choices: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ô‡∏°', '‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏õ‡πâ‡∏á', '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ'],
      onNext: () => Navigator.push(context, MaterialPageRoute(builder: (_) => EatingStyleQuestionScreen())),
      questionNumber: 5,
      totalQuestions: 7,
      icon: Icons.warning_amber,
    );
  }
}

class EatingStyleQuestionScreen extends StatelessWidget {
  const EatingStyleQuestionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î? ü•ó',
      choices: ['Keto', 'Intermittent Fasting (IF)', 'Low Carb', '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'],
      onNext: () => Navigator.push(context, MaterialPageRoute(builder: (_) => SmartwatchQuestionScreen())),
      questionNumber: 6,
      totalQuestions: 7,
      icon: Icons.fastfood,
    );
  }
}

class SmartwatchQuestionScreen extends StatelessWidget {
  const SmartwatchQuestionScreen({super.key});

  void _finish(BuildContext context) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'),
        content: const Text('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'),
        actions: [
          TextButton(
            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return QuestionScreenTemplate(
      questionText: '‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‚åö',
      choices: ['‡πÉ‡∏ä‡πà, ‡πÉ‡∏ä‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤', '‡πÉ‡∏ä‡πà, ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤', '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ'],
      onNext: () => Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => HomePage()),
      ),
      questionNumber: 7,
      totalQuestions: 7,
      icon: Icons.watch,
    );
  }
}
